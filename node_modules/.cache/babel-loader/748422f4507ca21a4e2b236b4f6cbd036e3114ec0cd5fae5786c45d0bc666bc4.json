{"ast":null,"code":"var _jsxFileName = \"/home/ismail/React/drag-drop/src/Components/Table.js\";\nimport React from \"react\";\nimport \"./Table.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Table(props) {\n  const tableRows = props.tableData.map((rowData, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n    children: rowData.map((cellData, cellIndex) => {\n      // check if it's the first column or not\n      if (cellIndex === 0) {\n        // return the first column data as is\n        return /*#__PURE__*/_jsxDEV(\"td\", {\n          children: cellData\n        }, `${index}-${cellIndex}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 12,\n          columnNumber: 13\n        }, this);\n      } else {\n        // create two buttons in a single td element\n        return /*#__PURE__*/_jsxDEV(\"td\", {\n          id: `cell-${index}-${cellIndex}`,\n          onDrop: event => props.onDrop(event, index, cellIndex),\n          onDragOver: props.onDragOver,\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            children: cellData.split(\" \")[0]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            children: cellData.split(\" \")[1]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 26,\n            columnNumber: 15\n          }, this)]\n        }, `${index}-${cellIndex}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 13\n        }, this);\n      }\n    })\n  }, index, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      style: {\n        width: 1376,\n        border: \"solid #E6E6E6\",\n        backgroundColor: \"#F8F8F8\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: tableRows[0]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: tableRows.slice(1)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n_c = Table;\nexport default Table;\nvar _c;\n$RefreshReg$(_c, \"Table\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Table","props","tableRows","tableData","map","rowData","index","children","cellData","cellIndex","fileName","_jsxFileName","lineNumber","columnNumber","id","onDrop","event","onDragOver","split","style","width","border","backgroundColor","slice","_c","$RefreshReg$"],"sources":["/home/ismail/React/drag-drop/src/Components/Table.js"],"sourcesContent":["import React from \"react\";\nimport \"./Table.css\";\n\nfunction Table(props) {\n  const tableRows = props.tableData.map((rowData, index) => (\n    <tr key={index}>\n      {rowData.map((cellData, cellIndex) => {\n        // check if it's the first column or not\n        if (cellIndex === 0) {\n          // return the first column data as is\n          return (\n            <td key={`${index}-${cellIndex}`}>\n              {cellData}\n            </td>\n          );\n        } else {\n          // create two buttons in a single td element\n          return (\n            <td\n              key={`${index}-${cellIndex}`}\n              id={`cell-${index}-${cellIndex}`}\n              onDrop={(event) => props.onDrop(event, index, cellIndex)}\n              onDragOver={props.onDragOver}\n            >\n              <button>{cellData.split(\" \")[0]}</button>\n              <button>{cellData.split(\" \")[1]}</button>\n            </td>\n          );\n        }\n      })}\n    </tr>\n  ));\n\n  return (\n    <div>\n      <table style={{ width: 1376, border: \"solid #E6E6E6\", backgroundColor: \"#F8F8F8\" }}>\n        <thead>{tableRows[0]}</thead>\n        <tbody>{tableRows.slice(1)}</tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default Table;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErB,SAASC,KAAKA,CAACC,KAAK,EAAE;EACpB,MAAMC,SAAS,GAAGD,KAAK,CAACE,SAAS,CAACC,GAAG,CAAC,CAACC,OAAO,EAAEC,KAAK,kBACnDP,OAAA;IAAAQ,QAAA,EACGF,OAAO,CAACD,GAAG,CAAC,CAACI,QAAQ,EAAEC,SAAS,KAAK;MACpC;MACA,IAAIA,SAAS,KAAK,CAAC,EAAE;QACnB;QACA,oBACEV,OAAA;UAAAQ,QAAA,EACGC;QAAQ,GADD,GAAEF,KAAM,IAAGG,SAAU,EAAC;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAE3B;MAET,CAAC,MAAM;QACL;QACA,oBACEd,OAAA;UAEEe,EAAE,EAAG,QAAOR,KAAM,IAAGG,SAAU,EAAE;UACjCM,MAAM,EAAGC,KAAK,IAAKf,KAAK,CAACc,MAAM,CAACC,KAAK,EAAEV,KAAK,EAAEG,SAAS,CAAE;UACzDQ,UAAU,EAAEhB,KAAK,CAACgB,UAAW;UAAAV,QAAA,gBAE7BR,OAAA;YAAAQ,QAAA,EAASC,QAAQ,CAACU,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;UAAC;YAAAR,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QAAU,eACzCd,OAAA;YAAAQ,QAAA,EAASC,QAAQ,CAACU,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;UAAC;YAAAR,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QAAU;QAAA,GANnC,GAAEP,KAAM,IAAGG,SAAU,EAAC;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAOzB;MAET;IACF,CAAC;EAAC,GAxBKP,KAAK;IAAAI,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QA0Bf,CAAC;EAEF,oBACEd,OAAA;IAAAQ,QAAA,eACER,OAAA;MAAOoB,KAAK,EAAE;QAAEC,KAAK,EAAE,IAAI;QAAEC,MAAM,EAAE,eAAe;QAAEC,eAAe,EAAE;MAAU,CAAE;MAAAf,QAAA,gBACjFR,OAAA;QAAAQ,QAAA,EAAQL,SAAS,CAAC,CAAC;MAAC;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAS,eAC7Bd,OAAA;QAAAQ,QAAA,EAAQL,SAAS,CAACqB,KAAK,CAAC,CAAC;MAAC;QAAAb,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAS;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAC7B;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACJ;AAEV;AAACW,EAAA,GAtCQxB,KAAK;AAwCd,eAAeA,KAAK;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}